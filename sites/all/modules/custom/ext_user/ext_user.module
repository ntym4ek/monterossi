<?php

const ADMIN_RID = 3;
const EDITOR_RID = 4;


/**
 * hook_module_implements_alter
 * change hook execution order, commerce_helper - last
 */
function ext_user_module_implements_alter(&$implementations, $hook)
{
  // Name of the hook.
  if (in_array($hook, ['form_alter'])) {
    // ext_user - last
    $module = 'ext_user';
    if (isset($implementations[$module])) {
      $group = $implementations[$module];
      unset($implementations[$module]);
      $implementations[$module] = $group;
    }
  }
}

function ext_user_preprocess_menu_link(&$vars)
{
  if ($vars["element"]["#href"] == 'user' && user_is_logged_in()) {
    // сменить Аккаунт на Имя пользователя
    $vars["element"]["#title"] = $GLOBALS['user']->name;
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function ext_user_form_user_pass_alter(&$form, &$form_state)
{
  if (!user_has_role(ADMIN_RID)) {
    $form['#prefix'] = '<div class="user-auth-form-wrapper">';
    $form['#prefix'] .= '<h1>' . t('Recover password') . '</h1>';
    $form['#prefix'] .= '<div class="user-links">' . t('or') .  ' <a href="' . url('user/login') . '">' . t('Log in') . '</a></div>';
    $form['#suffix'] = '</div>';
    $form["mail"]["#markup"] = t('The recovery link will be sent to E-Mail above.');
    $form["actions"]["submit"]['#value'] = t('Send me link');
    $form["actions"]["submit"]['#attributes']['class'] = ['btn', 'btn-brand', 'btn-wide'];

    array_unshift($form['#submit'], 'ext_user_user_pass_submit');
  }
}

function ext_user_user_pass_submit($form, $form_state)
{
  // запишем фразу с переводом
  variable_set('user_password_reset_text', t(variable_get('user_password_reset_text')));
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function ext_user_form_user_login_alter(&$form, &$form_state)
{
  $form['#prefix'] =  '<div class="user-auth-form-wrapper">';
  $form['#prefix'] .=   '<h1>' . t('Log in') . '</h1>';
  $form['#prefix'] .=   '<div class="user-links">' . t('or') .  ' <a href="' . url('user/password') . '">' . t('Recover password') . '</a></div>';
  $form['#suffix'] =  '</div>';

  $form['name']['#title'] = '';
  $form["name"]["#required"] = false;
  $form['name']['#attributes']['placeholder'] = t('E-Mail');
  $form['name']['#element_validate'][] = 'ext_user_login_name_validate';
  $form["pass"]["#title"] = '';
  $form["pass"]["#required"] = false;
  $form['pass']['#attributes']['placeholder'] = t('Password');
  unset($form['name']['#description']);
  unset($form['pass']['#description']);
  $form["actions"]["submit"]['#value'] = t('Log in');
  $form["actions"]["submit"]['#attributes']['class'] = ['btn', 'btn-brand', 'btn-wide'];

  $form["#submit"][] = 'ext_user_user_profile_form_submit';
}

/**
 * Form element validation handler for the user login form.
 *
 * Allows users to authenticate by username OR email.
 */
function ext_user_login_name_validate($form, &$form_state)
{
  $user = ext_user_user_load_by_login($form_state['values']['name']);
  if ($user->uid) {
    $form_state['values']['name'] = $user->name;
    return TRUE;
  }

  return FALSE;
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function ext_user_form_user_register_form_alter(&$form, &$form_state)
{
  if ($GLOBALS['theme'] != 'seven') {
    // убрать необязательные поля
    $form['account']['name']['#type'] = 'hidden';
    $form['account']['name']['#value'] = 'ext_user_' . user_password();

    // изменить вид полей
    $form['account']['mail']['#attributes']['placeholder'] = t('E-Mail');
    $form['account']['mail']['#title'] = '';
    $form['account']['mail']['#required'] = false;
    unset($form['account']['mail']['#description']);
    $form['account']['pass']['#attributes']['placeholder'] = t('Password');
    $form['account']['pass']['#title'] = '';
    $form['account']['pass']['#type'] = 'textfield';
    unset($form['account']['pass']['#description']);

    // менять название кнопки нельзя, (user.admin.inc строка 27 привязана к дефолтному названию)
    //    $form["actions"]["submit"]['#value'] = t('Submit');
    $form["actions"]["submit"]['#attributes']['class'] = ['btn', 'btn-brand', 'btn-full-wide'];

    $form["admin_language"]["admin_language"]["#default_value"] = 'default';
    $form["admin_language"]["#access"] = false;
    $form["locale"]["#access"] = false;

    // обёртка для темизации формы
    $form['#prefix'] = '<div class="user-auth-form-wrapper">';
    $form['#prefix'] .= '<h1>' . t('Register', [], ['context' => 'account']) . '</h1>';
    $form['#prefix'] .= '<div class="user-links"><a href="/user/login">' . t('Log in', [], ['context' => 'account']) . '</a> ' . t('or') . ' <a href="/user/password">' . t('Recover password') . '</a></div>';
    $form['#suffix'] = '</div>';

    if (isset($form["fz152_agreement"])) $form["fz152_agreement"]["#weight"] = 10;
    $form["actions"]["#weight"] = 11;

    // обработчики
    $form['#validate'][] = 'ext_user_user_register_form_email_validate';
  }
}

/**
 * Проверка E-mail на спам при регистрации
 */
function ext_user_user_register_form_email_validate($form, &$form_state)
{
  // отсеять нежелательные (спамерские) email
  foreach(['!.*@.*\.us!s', '!.*@.*\.link!s', '!.*@.*\.co\.uk!s', '!.*@.*\.work!s', '!.*@.*\.website!s',
            '!.*@.*\.app!s', '!.*@.*\.ltd!s', '!.*@.*\.net!s', '!.*@.*\.online!s', '!.*@.*\.store!s', '!.*@.*\.info!s',
            '!.*@.*\.site!s', '!.*@.*\.gq!s', '!.*@.*\.network!s', '!.*@.*\.xyz!s', '!.*@.*\.cf!s', '!.*@.*\.club!s', '!.*@.*\.jokeray\.com!s', '!.*@.*\.dynainbox\.com!s'
            , '!.*@.*\.mailsmail\.ru!s', '!.*@.*\.mailyaha\.ru!s', '!.*@.*\.aolmail\.fun!s', '!.*@.*\.osakass\.!s'] as $pattern) {
    if (preg_match($pattern, $form_state['values']['mail'])) {
      form_set_error('mail', t('Registration unavailable.'));
    }
  }
}

/**
 * Implements hook_form_alter().
 */
function ext_user_form_user_profile_form_alter(&$form, &$form_state)
{
  // в профиле оставляем только смену пароля
  if (!user_has_role(ADMIN_RID)) {
    $form["actions"]["submit"]['#attributes']['class'] = ['btn', 'btn-brand'];
    $form["actions"]["submit"]['#value'] = 'Сохранить';

    if ($form["#user_category"] == 'account') {
      $form['#prefix'] =  '<div class="user-auth-form-wrapper">';
      $form['#prefix'] .=   '<h1>Смена пароля</h1>';
      $form['#suffix'] =  '</div>';
      if (isset($form["account"]["pass"])) {
        $form["account"]["current_pass"]["#title"] = 'Старый пароль';
        $form["account"]["current_pass"]["#description"] = 'Для смены сначала введите текущий пароль';
        $form["account"]["pass"]["#title"] = 'Новый пароль';
        $form["account"]["pass"]["#description"] = '';
        $form["account"]["pass"]["#type"] = 'password';
      }
      $form["locale"]["#access"] = false;
      $form["mimemail"]["#access"] = false;
      $form["timezone"]["#access"] = false;
      $form["account"]["mail"]["#access"] = false;
    }

    $form["#submit"][] = 'ext_user_user_profile_form_submit';
  }
}

function ext_user_user_profile_form_submit($form, &$form_state)
{
  // после смены пароля редирект на главную
  $form_state['redirect'] = '<front>';
}

/**
 * Загрузить пользователя по указанному логину
 * @param $login
 *
 * @return object
 */
function ext_user_user_load_by_login($login)
{
  // Try loading by email.
  if ($user = user_load_by_mail($login)) {
    return $user;
  }

  // Try loading by username.
  if ($user = user_load_by_name($login)) {
    return $user;
  }
  return user_load(0);
}

/**
 * Сохранить значение переменной для Пользователя.
 * Удалить, если $value == null
 * @param $name
 * @param $value
 */
function ext_user_store_session_setting($name, $value)
{
  if (!isset($value) && isset($_SESSION[$name])) {
    unset($_SESSION[$name]);
  }

  if (isset($value)) {
    $_SESSION[$name] = $value;
  }
}

/**
 * Вернуть значение переменной для Пользователя
 * @param $name
 * @return mixed|null
 */
function ext_user_get_session_setting($name)
{
  return $_SESSION[$name] ?? null;
}

/**
 * Определить наличие роли у текущего пользователя
 * @param $rids - массив ID ролей
 * @return bool
 */
function ext_user_has_roles($rids)
{
  $account = $GLOBALS['user'];
  $account_rids = array_keys($account->roles);

  return (bool)array_intersect($rids, $account_rids);
}


function ext_user_process_page(&$vars)
{
  if (arg(0) == 'user') {
    $vars['title'] = '';
    if (isset($vars["tabs"])) {
      unset($vars["tabs"]);
    }
  }
}
